os: linux
dist: bionic
language: generic
services:
  - postgresql

# ---------------------------- APT configuration -----------------------------

.apt_xenial_config: &apt_xenial_config
  update: true
  sources:
    - ubuntu-toolchain-r-test
    - llvm-toolchain-xenial-7

.apt_xenial_sqlite: &apt_xenial_sqlite
  <<: *apt_xenial_config
  packages:
    # Boost
    - libboost-all-dev
    # LLVM/clang
    - llvm-7
    - llvm-7-dev
    - clang-7
    - libclang-7-dev
    # Java
    - default-jdk
    # ODB
    - odb
    - libodb-dev
    # SQLite
    - libodb-sqlite-dev
    - libsqlite3-dev
    # Parser
    - libmagic-dev
    - libgit2-dev
    - ctags
    # Service
    - libgraphviz-dev
    - nodejs-legacy
    - npm
    # GTest
    - libgtest-dev
    # Thrift
    - libssl-dev

.apt_xenial_pgsql: &apt_xenial_pgsql
  <<: *apt_xenial_config
  packages:
    # Boost
    - libboost-all-dev
    # LLVM/clang
    - llvm-7
    - llvm-7-dev
    - clang-7
    - libclang-7-dev
    # Java
    - default-jdk
    # ODB
    - odb
    - libodb-dev
    # PostgreSQL
    - libodb-pgsql-dev
    - postgresql-server-dev-9.5
    # Parser
    - libmagic-dev
    - libgit2-dev
    - ctags
    # Service
    - libgraphviz-dev
    - nodejs-legacy
    - npm
    # GTest
    - libgtest-dev
    # Thrift
    - libssl-dev

.apt_bionic_config: &apt_bionic_config
  update: true

.apt_bionic_sqlite: &apt_bionic_sqlite
  <<: *apt_bionic_config
  packages:
    # Boost
    - libboost-all-dev
    # LLVM/clang
    - llvm-7
    - llvm-7-dev
    - clang-7
    - libclang-7-dev
    # Java
    - default-jdk
    # SQLite
    - libsqlite3-dev
    # Parser
    - libmagic-dev
    - libgit2-dev
    - ctags
    # Service
    - libgraphviz-dev
    - npm
    # GTest
    - libgtest-dev
    # Thrift
    - libssl1.0-dev

.apt_bionic_pgsql: &apt_bionic_pgsql
  <<: *apt_bionic_config
  packages:
    # Boost
    - libboost-all-dev
    # LLVM/clang
    - llvm-7
    - llvm-7-dev
    - clang-7
    - libclang-7-dev
    # Java
    - default-jdk
    # PostgreSQL
    - postgresql-server-dev-10
    # Parser
    - libmagic-dev
    - libgit2-dev
    - ctags
    # Service
    - libgraphviz-dev
    - npm
    # GTest
    - libgtest-dev
    # Thrift
    - libssl1.0-dev

.apt_focal_config: &apt_focal_config
  update: true

.apt_focal_sqlite: &apt_focal_sqlite
  <<: *apt_focal_config
  packages:
    # Boost
    - libboost-all-dev
    # LLVM/clang
    - llvm-7
    - llvm-7-dev
    - clang-7
    - libclang-7-dev
    # Java
    - default-jdk
    # ODB
    - odb
    - libodb-dev
    # SQLite
    - libodb-sqlite-dev
    - libsqlite3-dev
    # Parser
    - libmagic-dev
    - libgit2-dev
    - ctags
    # Service
    - libgraphviz-dev
    - npm
    # GTest
    - libgtest-dev
    # Thrift
    - thrift-compiler
    - libthrift-dev
    - libssl-dev

.apt_focal_pgsql: &apt_focal_pgsql
  <<: *apt_focal_config
  packages:
    # Boost
    - libboost-all-dev
    # LLVM/clang
    - llvm-7
    - llvm-7-dev
    - clang-7
    - libclang-7-dev
    # Java
    - default-jdk
    # ODB
    - odb
    - libodb-dev
    # PostgreSQL
    - libodb-pgsql-dev
    # (Travis can't automatically spin up a running PostgreSQL instance for
    # 20.04.)
    - postgresql-12
    - postgresql-server-dev-12
    # Parser
    - libmagic-dev
    - libgit2-dev
    - ctags
    # Service
    - libgraphviz-dev
    - npm
    # GTest
    - libgtest-dev
    # Thrift
    - thrift-compiler
    - libthrift-dev
    - libssl-dev

# ------------------------ Self-compiled dependencies ------------------------

# Dummy script that helps us fetch a binary release from a GitHub repository.
.write_download_script: &write_download_script
  |
  if [[ "${TRAVIS_DIST}" == "xenial" ]]; then
    IMAGE="ub1604"
  elif [[ "${TRAVIS_DIST}" == "bionic" ]]; then
    IMAGE="ub1804"
  elif [[ "${TRAVIS_DIST}" == "focal" ]]; then
    IMAGE="ub2004"
  fi

  echo "Prepare GitHub release pull script for ${TRAVIS_DIST}: '${IMAGE}'"

  echo "IMAGE=${IMAGE}" >"dep.sh"
  echo 'pushd ${HOME}' >>"dep.sh"
  echo 'echo "Downloading $1..."' >>"dep.sh"
  echo 'curl -sL http://api.github.com/repos/whisperity/CodeCompass-Dependencies/releases/latest \' >>"dep.sh"
  echo ' | grep "${IMAGE}_$1-" \' >>"dep.sh"
  echo ' | grep "\-install.tar.gz" \' >>"dep.sh"
  echo ' | grep "browser_download_url" \' >>"dep.sh"
  echo ' | cut -d ":" -f 2,3 \' >>"dep.sh"
  echo " | sed -E 's/^ \"(.*)\",?$/\1/' \\" >>"dep.sh"
  echo ' | wget -O "$1.tar.gz" -i -' >>"dep.sh"
  echo 'tar xvfz "./$1.tar.gz"' >>"dep.sh"
  echo 'rm "./$1.tar.gz"' >>"dep.sh"
  echo 'popd' >>"dep.sh"

  cat "dep.sh"
  mv -v "dep.sh" "${HOME}/get-dependency.sh"
  chmod +x "${HOME}/get-dependency.sh"
        
.install_gtest_xenial: &install_gtest_xenial
  |
  if [ ! -f "$HOME/gtest-install/lib/libgtest.a" ]; then
    echo "Building GoogleTest..."
    cd $HOME
    mkdir gtest
    cp -R /usr/src/gtest/* ./gtest
    cd gtest
    mkdir build && cd build
    cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/gtest-install
    make -j $(nproc)

    mkdir -p $HOME/gtest-install/lib
    cp libgtest.a libgtest_main.a $HOME/gtest-install/lib/
  fi

.install_gtest_bionic: &install_gtest_bionic
  |
  if [ ! -f "$HOME/gtest-install/lib/libgtest.a" ]; then
    echo "Building GoogleTest..."
    cd $HOME
    mkdir gtest
    cp -R /usr/src/googletest/* ./gtest
    cd gtest
    mkdir build && cd build
    cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/gtest-install
    make install -j $(nproc)
  fi

.install_gtest_focal: &install_gtest_focal
  |
  if [ ! -f "$HOME/gtest-install/lib/libgtest.a" ]; then
    echo "Building GoogleTest..."
    cd $HOME
    mkdir gtest
    cp -R /usr/src/googletest/* ./gtest
    cd gtest
    mkdir build && cd build
    cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/gtest-install
    make install -j $(nproc)
  fi

cache:
  directories:
    - $HOME/gtest-install

# ---------------------------------- Setup -----------------------------------

before_script:
  # Default locations and versions
  - which cmake g++ clang llvm-config javac
  - cmake --version
  - g++ --version
  - clang --version
  - llvm-config --version --has-rtti
  - javac -version
  # LLVM/Clang test from package install
  - /usr/bin/clang-7 --version
  - /usr/bin/llvm-config-7 --version --has-rtti
  # ODB
  - export CMAKE_PREFIX_PATH=$HOME/odb-install:$CMAKE_PREFIX_PATH
  - export PATH=$HOME/odb-install/bin:$PATH
  - which odb
  - odb --version
  # Thrift
  - export CMAKE_PREFIX_PATH=$HOME/thrift-install:$CMAKE_PREFIX_PATH
  - export PATH=$HOME/thrift-install/bin:$PATH
  - which thrift
  - thrift --version
  # GTest
  - export GTEST_ROOT=$HOME/gtest-install

.fix_focal_travis_postgresql_server: &fix_focal_travis_postgresql_server
  # Newer PostgreSQL servers on Travis don't automatically allow connecting
  # with the 'postgresql' user.
  # !! YOU SHOULD **NEVER** DO THIS ON A LIVE SYSTEM !!
  - sudo cat /etc/postgresql/*/main/pg_hba.conf
  - sudo sed -i "s/peer/trust/g" /etc/postgresql/*/main/pg_hba.conf
  - sudo sed -i "s/md5/trust/g" /etc/postgresql/*/main/pg_hba.conf
  - sudo cat /etc/postgresql/*/main/pg_hba.conf
  - sudo service postgresql restart 12
  - sudo service postgresql status

.build_postgres: &build_postgres
  - cd $TRAVIS_BUILD_DIR
  - mkdir build_pgsql && cd build_pgsql
  - >
    cmake ..
    -DDATABASE=pgsql
    -DCMAKE_BUILD_TYPE=Release
    -DCMAKE_INSTALL_PREFIX=$TRAVIS_BUILD_DIR/install_pgsql
    -DTEST_DB="pgsql:host=localhost;port=5432;user=postgres;password=;database=cc_test"
    -DLLVM_DIR=/usr/lib/llvm-7/cmake
    -DClang_DIR=/usr/lib/cmake/clang-7
  - make install -j $(nproc)
  - make test ARGS=-V

.build_sqlite: &build_sqlite
  - cd $TRAVIS_BUILD_DIR
  - mkdir build_sqlite && cd build_sqlite
  - >
    cmake ..
    -DDATABASE=sqlite
    -DCMAKE_BUILD_TYPE=Release
    -DCMAKE_INSTALL_PREFIX=$TRAVIS_BUILD_DIR/install_sqlite
    -DTEST_DB="sqlite:database=$HOME/cc_test.sqlite"
    -DLLVM_DIR=/usr/lib/llvm-7/cmake
    -DClang_DIR=/usr/lib/cmake/clang-7
  - make install -j $(nproc)
  - make test ARGS=-V

# ----------------------------------- Jobs -----------------------------------

jobs:
  include:
    - name: "Xenial Xerus (16.04), PostgreSQL"
      dist: xenial
      addons:
        apt:
          <<: *apt_xenial_pgsql
        postgresql: "9.5"
      env:
        - DATABASE=pgsql
      before_install:
        - *write_download_script
      install:
        - ${HOME}/get-dependency.sh thrift
        - *install_gtest_xenial
      script:
        *build_postgres
    - name: "Xenial Xerus (16.04), SQLite"
      dist: xenial
      addons:
        apt:
          <<: *apt_xenial_sqlite
      env:
        - DATABASE=sqlite
      before_install:
        - *write_download_script
      install:
        - ${HOME}/get-dependency.sh thrift
        - *install_gtest_xenial
      script:
        *build_sqlite
    - name: "Bionic Beaver (18.04), PostgreSQL"
      dist: bionic
      addons:
        apt:
          <<: *apt_bionic_pgsql
        postgresql: "10"
      env:
        - DATABASE=pgsql
      before_install:
        - *write_download_script
      install:
        - ${HOME}/get-dependency.sh odb-$DATABASE
        - ${HOME}/get-dependency.sh thrift
        - *install_gtest_bionic
      script:
        *build_postgres
    - name: "Bionic Beaver (18.04), SQLite"
      dist: bionic
      addons:
        apt:
          <<: *apt_bionic_sqlite
      env:
        - DATABASE=sqlite
      before_install:
        - *write_download_script
      install:
        - ${HOME}/get-dependency.sh odb-$DATABASE
        - ${HOME}/get-dependency.sh thrift
        - *install_gtest_bionic
      script:
        *build_sqlite
    - name: "Focal Fossa (20.04), PostgreSQL"
      dist: focal
      addons:
        apt:
          <<: *apt_focal_pgsql
        postgresql: "12"
      env:
        - DATABASE=pgsql
      before_install:
        - *fix_focal_travis_postgresql_server
      install:
        - *install_gtest_focal
      script:
        *build_postgres
    - name: "Focal Fossa (20.04), SQLite"
      dist: focal
      addons:
        apt:
          <<: *apt_focal_sqlite
      env:
        - DATABASE=sqlite
      install:
        - *install_gtest_focal
      script:
        *build_sqlite

